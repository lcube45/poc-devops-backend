name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
    paths-ignore:
      - '.github/**/*.yml'
      - '.gitignore'

jobs:

  build-project:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      CODEARTIFACT_AUTH_TOKEN: ${{ steps.get-codeartifact-token.outputs.CODEARTIFACT_AUTH_TOKEN }}
      VERSION: ${{ steps.get-version.outputs.VERSION }}

    steps:

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Get current version
        id: get-version
        run: echo "VERSION=$(cat pom.xml | grep "^    <version>.*</version>$" | awk -F'[><]' '{print $3}')" >> $GITHUB_OUTPUT

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS CodeArtifact
        id: get-codeartifact-token
        run: echo "CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_ACCOUNT }} --region ${{ secrets.AWS_REGION }} --query authorizationToken --output text)" >> $GITHUB_OUTPUT

      - name: Build with Maven
        run: mvn -B package -s ./.mvn/settings.xml -DskipTests
        env:
          CODEARTIFACT_AUTH_TOKEN: ${{ steps.get-codeartifact-token.outputs.CODEARTIFACT_AUTH_TOKEN }}

      - name: Move war artefact
        run: mv target/build.war build.war

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ steps.get-version.outputs.VERSION }}
          path: |
            build.war
            scripts/
            appspec.yml

  release-project:
    name: Release
    runs-on: ubuntu-latest
    needs: build-project
    steps:

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.build-project.outputs.VERSION }}

      - name: Archive artifact
        uses: thedoctor0/zip-release@master
        with:
          filename: build-${{ needs.build-project.outputs.VERSION }}.zip

      - name: Create a Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: v${{ needs.build-project.outputs.VERSION }}
          tag: ${{ needs.build-project.outputs.VERSION }}
          artifactErrorsFailBuild: true
          artifacts: build-${{ needs.build-project.outputs.VERSION }}.zip
          artifactContentType: application/zip
          skipIfReleaseExists: true

  deploy-project:
    name: Deploy
    runs-on: ubuntu-latest
    needs: release-project

    steps:

      - name: Download latest release asset
        id: download-release-asset
        uses: robinraju/release-downloader@v1.7
        with:
          latest: true
          fileName: "*.zip"

      - name: Rename artefact
        run: mv build-${{ steps.download-release-asset.outputs.tag_name }}.zip build.zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy asset to AWS s3
        run: |
          aws s3 rm s3://${{ secrets.AWS_S3_BUCKET }}/ --recursive
          aws s3 cp build.zip s3://${{ secrets.AWS_S3_BUCKET }} --recursive

      - name: Launch AWS codedeploy deployment
        run : |
          aws deploy create-deployment --application-name poc-inetum --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name HelloWorldDeploymentGroup --s3-location bucket=poc-devops-backend,bundleType=zip,key=build.zip